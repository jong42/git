for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix[i,j] = sum ((logresp-(beta0 + beta1 + temp))^2)
}
}
resultmatrix
head (resultmatrix)
min (resultmatrix)
which (resultmatrix==min(resultmatrix), arr.ind = T)
beta0best = beta0.seq[1]
beta1best = beta1.seq[1]
abline (5,0.1)
plot(x,y)
abline (5,0.1)
## Übungsblatt 1
d = read.csv("/home/xi86xev/git/git/Statistische Verfahren/2017_SS_7_2_3_soilrespiration1.csv", sep = ";")
plot(d[1],d[2])
# Gittersuche nach bester Geraden
beta0.seq = seq(0.1,5,0.01)
beta1.seq = seq(0.1,0.25,0.01)
temp = d$temp
resp = d$resp
logresp = log(resp)
plot(temp,log(resp))
resultmatrix= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix[i,j] = sum ((logresp-(beta0 + beta1 + temp))^2)
}
}
bestfit = which (resultmatrix==min(resultmatrix), arr.ind = T)
beta0best = beta0.seq[1]
beta1best = beta1.seq[1]
abline (5,0.1)
abline (0.1,0.25)
## Übungsblatt 1
d = read.csv("/home/xi86xev/git/git/Statistische Verfahren/2017_SS_7_2_3_soilrespiration1.csv", sep = ";")
plot(d[1],d[2])
# Gittersuche nach bester Geraden
beta0.seq = seq(0.1,5,0.01)
beta1.seq = seq(0.1,0.25,0.01)
temp = d$temp
resp = d$resp
logresp = log(resp)
plot(temp,log(resp))
resultmatrix= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix[i,j] = sum ((logresp-(beta0 + beta1 + temp))^2)
}
}
bestfit = which (resultmatrix==min(resultmatrix), arr.ind = T)
beta0best = beta0.seq[1]
beta1best = beta1.seq[1]
abline (0.1,0.25)
## Übungsblatt 1
d = read.csv("/home/xi86xev/git/git/Statistische Verfahren/2017_SS_7_2_3_soilrespiration1.csv", sep = ";")
plot(d[1],d[2])
# Gittersuche nach bester Geraden
beta0.seq = seq(0.1,5,0.01)
beta1.seq = seq(0.1,0.25,0.01)
temp = d$temp
resp = d$resp
logresp = log(resp)
plot(temp,log(resp))
resultmatrix= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix[i,j] = sum ((logresp-(beta0 + beta1 + temp))^2)
}
}
bestfit = which (resultmatrix==min(resultmatrix), arr.ind = T)
beta0best = beta0.seq[1]
beta1best = beta1.seq[1]
abline (0.1,0.1)
## Übungsblatt 1
d = read.csv("/home/xi86xev/git/git/Statistische Verfahren/2017_SS_7_2_3_soilrespiration1.csv", sep = ";")
plot(d[1],d[2])
# Gittersuche nach bester Geraden
beta0.seq = seq(0.1,5,0.01)
beta1.seq = seq(0.1,0.25,0.01)
temp = d$temp
resp = d$resp
logresp = log(resp)
plot(temp,log(resp))
resultmatrix= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix[i,j] = sum ((logresp-(beta0 + beta1 + temp))^2)
}
}
bestfit = which (resultmatrix==min(resultmatrix), arr.ind = T)
beta0best = beta0.seq[1]
beta1best = beta1.seq[1]
abline (0.1,0.1)
## Übungsblatt 1
d = read.csv("/home/xi86xev/git/git/Statistische Verfahren/2017_SS_7_2_3_soilrespiration1.csv", sep = ";")
plot(d[1],d[2])
# Gittersuche nach bester Geraden
beta0.seq = seq(0.1,5,0.01)
beta1.seq = seq(0.1,0.25,0.01)
temp = d$temp
resp = d$resp
logresp = log(resp)
plot(temp,log(resp))
resultmatrix= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix[i,j] = sum ((logresp-(beta0 + beta1 + temp))^2)
}
}
bestfit = which (resultmatrix==min(resultmatrix), arr.ind = T)
beta0best = beta0.seq[1]
beta1best = beta1.seq[1]
abline (beta0best,beta1best)
abline (beta0best,beta1best)
## Übungsblatt 1
##1.
d = read.csv("/home/xi86xev/git/git/Statistische Verfahren/2017_SS_7_2_3_soilrespiration1.csv", sep = ";")
plot(d[1],d[2])
# Gittersuche nach bester Geraden
beta0.seq = seq(0.1,5,0.01)
beta1.seq = seq(0.1,0.25,0.01)
temp = d$temp
resp = d$resp
logresp = log(resp)
plot(temp,log(resp))
resultmatrix= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix[i,j] = sum ((logresp-(beta0 + beta1 + temp))^2)
}
}
bestfit = which (resultmatrix==min(resultmatrix), arr.ind = T)
beta0best = beta0.seq[1]
beta1best = beta1.seq[1]
abline (beta0best,beta1best)
##2.
n = 20
x = seq (1:n)
?seq()
x = seq (1:1,length.out=20)
x = seq (1:1,length.out=20)
x = seq (from=1,to=1,length.out=20)
rm(x)
col1 = seq (from=1,to=1,length.out=20)
col2 = seq(1:n)
?matrix()
c(col1,col2)
X = matrix(c(col1,col2),ncol=2)
View(X)
## Übungsblatt 1
##1.
d = read.csv("/home/xi86xev/git/git/Statistische Verfahren/2017_SS_7_2_3_soilrespiration1.csv", sep = ";")
plot(d[1],d[2])
# Gittersuche nach bester Geraden
beta0.seq = seq(0.1,5,0.01)
beta1.seq = seq(0.1,0.25,0.01)
temp = d$temp
resp = d$resp
logresp = log(resp)
plot(temp,log(resp))
resultmatrix= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix[i,j] = sum ((logresp-(beta0 + beta1 + temp))^2)
}
}
bestfit = which (resultmatrix==min(resultmatrix), arr.ind = T)
beta0best = beta0.seq[1]
beta1best = beta1.seq[1]
abline (beta0best,beta1best)
##2.
n = 20
col1 = seq (from=1,to=1,length.out=20)
col2 = seq(1:n)
X = matrix(c(col1,col2),ncol=2)
beta = [beta0,bet1]
beta []= [beta0,bet1]
beta []= [beta0,beta1]
beta []= c(beta0,beta1)
beta = c(beta0,beta1)
X*beta
transpose(X)
t(X)
t(X)* X
X%*%beta
t(X)%*% X
solve(t(X)%*% X)
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix_abs[i,j] = sum (abs(resp-(beta0 + beta1*temp)))
}
}
resultmatrix_abs= matrix(0,length(beta0.seq), length(beta1.seq))
resultmatrix_exp= matrix(0,length(beta0.seq), length(beta1.seq))
resultmatrix_ort= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix_abs[i,j] = sum (abs(resp-(beta0 + beta1*temp)))
}
}
## Übungsblatt 1
##1.
d = read.csv("/home/xi86xev/git/git/Statistische Verfahren/2017_SS_7_2_3_soilrespiration1.csv", sep = ";")
plot(d[1],d[2])
# Gittersuche nach bester Geraden
beta0.seq = seq(0.1,5,0.01)
beta1.seq = seq(0.1,0.25,0.01)
temp = d$temp
resp = d$resp
logresp = log(resp)
plot(temp,log(resp))
resultmatrix= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix[i,j] = sum ((logresp-(beta0 + beta1 * temp))^2)
}
}
bestfit = which (resultmatrix==min(resultmatrix), arr.ind = T)
beta0best = beta0.seq[1]
beta1best = beta1.seq[1]
abline (beta0best,beta1best)
##2.
n = 20
col1 = seq (from=1,to=1,length.out=20)
col2 = seq(1:n)
X = matrix(c(col1,col2),ncol=2)
beta = c(beta0,beta1)
# Vektor-Matrix-Multiplikation
X%*%beta
# Matrix-Matrix-Multiplikation
t(X)%*% X
# Inverse of matrix
solve(t(X)%*% X)
View(bestfit)
beta0best = beta0.seq[1]
beta1best = beta1.seq[369]
abline (beta0best,beta1best)
beta1.seq[369]
beta0.seq[369]
beta0best = beta0.seq[369]
beta1best = beta1.seq[1]
abline (beta0best,beta1best)
bestfit = which (resultmatrix==min(resultmatrix), arr.ind = T)
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix_abs[i,j] = sum (abs(resp-(beta0 + beta1*temp)))
}
}
bestfit = which (resultmatrix==min(resultmatrix), arr.ind = T)
beta0best = beta0.seq[369]
beta1best = beta1.seq[1]
abline (beta0best,beta1best)
bestfit = which (resultmatrix==min(resultmatrix_abs), arr.ind = T)
beta0best = beta0.seq[1]
beta1best = beta1.seq[2]
abline (beta0best,beta1best)
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix_abs[i,j] = sum (abs(logresp-(beta0 + beta1*temp)))
}
}
bestfit = which (resultmatrix==min(resultmatrix_abs), arr.ind = T)
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix_abs[i,j] = sum (abs(resp-(beta0 + beta1*temp)))
}
}
bestfit = which (resultmatrix_abs==min(resultmatrix_abs), arr.ind = T)
beta0best = beta0.seq[491]
beta1best = beta1.seq[16]
abline (beta0best,beta1best)
resultmatrix_abs= matrix(0,length(beta0.seq), length(beta1.seq))
resultmatrix_exp= matrix(0,length(beta0.seq), length(beta1.seq))
resultmatrix_ort= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix_abs[i,j] = sum (abs(logresp-(beta0 + beta1*temp)))
}
}
bestfit = which (resultmatrix_abs==min(resultmatrix_abs), arr.ind = T)
beta0best = beta0.seq[367]
beta1best = beta1.seq[1]
abline (beta0best,beta1best)
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix_pot[i,j] = sum ((logresp-(beta0 + beta1*temp))^4)
}
}
bestfit = which (resultmatrix_pot==min(resultmatrix_pot), arr.ind = T)
resultmatrix_pot= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix_pot[i,j] = sum ((logresp-(beta0 + beta1*temp))^4)
}
}
bestfit = which (resultmatrix_pot==min(resultmatrix_pot), arr.ind = T)
beta0best = beta0.seq[367]
beta1best = beta1.seq[1]
abline (beta0best,beta1best)
beta0best = beta0.seq[371]
beta1best = beta1.seq[1]
abline (beta0best,beta1best)
abline (beta0best,beta1best, col="blue")
abline (beta0best,beta1best, col="yellow")
## Übungsblatt 1
##1.
d = read.csv("/home/xi86xev/git/git/Statistische Verfahren/2017_SS_7_2_3_soilrespiration1.csv", sep = ";")
plot(d[1],d[2])
# Gittersuche nach bester Geraden
beta0.seq = seq(0.1,5,0.01)
beta1.seq = seq(0.1,0.25,0.01)
temp = d$temp
resp = d$resp
logresp = log(resp)
plot(temp,log(resp))
resultmatrix= matrix(0,length(beta0.seq), length(beta1.seq))
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix[i,j] = sum ((logresp-(beta0 + beta1 * temp))^2)
}
}
bestfit = which (resultmatrix==min(resultmatrix), arr.ind = T)
beta0best = beta0.seq[369]
beta1best = beta1.seq[1]
abline (beta0best,beta1best, col="red")
##2.
n = 20
col1 = seq (from=1,to=1,length.out=20)
col2 = seq(1:n)
X = matrix(c(col1,col2),ncol=2)
beta = c(beta0,beta1)
# Vektor-Matrix-Multiplikation
X%*%beta
# Matrix-Matrix-Multiplikation
t(X)%*% X
# Inverse of matrix
solve(t(X)%*% X)
##3.
resultmatrix_abs= matrix(0,length(beta0.seq), length(beta1.seq))
resultmatrix_pot= matrix(0,length(beta0.seq), length(beta1.seq))
resultmatrix_ort= matrix(0,length(beta0.seq), length(beta1.seq))
# absolute differences
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix_abs[i,j] = sum (abs(logresp-(beta0 + beta1*temp)))
}
}
bestfit = which (resultmatrix_abs==min(resultmatrix_abs), arr.ind = T)
beta0best = beta0.seq[367]
beta1best = beta1.seq[1]
abline (beta0best,beta1best, col="yellow")
# 4. Potenz
for (i in 1:length(beta0.seq))
{
for (j in 1: length(beta1.seq))
{
beta0 = beta0.seq[i]
beta1 = beta1.seq[j]
resultmatrix_pot[i,j] = sum ((logresp-(beta0 + beta1*temp))^4)
}
}
bestfit = which (resultmatrix_pot==min(resultmatrix_pot), arr.ind = T)
beta0best = beta0.seq[371]
beta1best = beta1.seq[1]
abline (beta0best,beta1best, col="blue")
?dnorm()
mu = 5
sigma_squared = 2
m = dnorm(x,mean=5,sd=2)
?pnorm()
m = pnorm(x,mean=5,sd=2)
?qnorm()
?norm()
norm(1)
rnorm (100,5,2)
model = rnorm (100,5,2)
?p()
p(mu)
pnorm(mu+sigma_squared,mu, sigma_squared)
pnorm(mu-sigma_squared,mu, sigma_squared)
pnorm(mu+sigma_squared,mu, sigma_squared) - pnorm(mu-sigma_squared,mu, sigma_squared)
sigma = sqrt(sigma_squared)
pnorm(mu+sigma,mu, sigma) - pnorm(mu-sigma,mu, sigma)
pnorm(mu+2*sigma,mu, sigma) - pnorm(mu-2*sigma,mu, sigma)
pnorm(mu+3*sigma,mu, sigma) - pnorm(mu-3*sigma,mu, sigma)
?unif()
??unif
E =
punif(2)
E =
punif(2)
E =
punif(2)
punif(2)
punif(1)
punif(56)
runif(10000)
runif(34)
E = 0.5
var = (0.5)^2
d = read.csv("mietspiegel99.csv")
?read.csv()
d = read.csv("mietspiegel99")
getwd()
dir = "/home/xi86xev/git/git/STatistische Verfahren"
file_name = "mietspiegel99.csv"
setwd(dir)
?setwd()
getwd()
dir = "/home/xi86xev/git/git/Statistische Verfahren"
file_name = "mietspiegel99.csv"
setwd(dir)
d = read.csv("mietspiegel99")
d = read.csv(file_name)
View(d)
?lm()
?mle
library(stats4)
?mle
lm(mieteqm~1+1/flaeche,d)
plot(lm(mieteqm~1+1/flaeche,d))
fit = lm(mieteqm~1+1/flaeche,d)
summary(fit)
fit = lm(mieteqm ~ 1+(1/flaeche),d)
summary(fit)
fit = lm(mieteqm ~ 1/flaeche,d)
summary(fit)
d$flaeche
1/d$flaeche
fit = lm(mieteqm ~ flaeche,d)
summary(fit)
fit = lm(mieteqm ~ flaeche^(-1),d)
fit = lm(mieteqm ~ 1/flaeche,d)
summary(fit)
